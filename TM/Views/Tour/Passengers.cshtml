
@{
    ViewData["Title"] = "Passengers";
}
@* <head> *@
@section Styles {
    <style>
       :root {
            --bg: #f8f8ff;
            --table-bg: #ffffff;
            --primary: #0065bd;
            --text: #121212;
            --gray-light: #eaeaea;
            --active: #4a666a;
            --inactive: #c0c0c0;
            --offline: #bbbbbb;
            --tag-design: #bdd8ff;
            --tag-qa: #ffe4bd;
            --tag-dev: #d8ffc4;
            --tag-marketing: #ffd4be;
            --font: 'Source Sans Pro', sans-serif;
            --font-size-base: 0.9rem;
            --font-size-large: 1rem;
            --font-size-small: 0.75rem;
            --spacing-xs: 0.25rem;
            --spacing-sm: 0.5rem;
            --spacing-md: 1rem;
            --spacing-lg: 1.5rem; 
        }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: var(--font);
        display: grid;
        place-items: center;
        height: 100vh;
        background: var(--bg);
        color: var(--text);
    }

    .table-widget {
        border-radius: 1rem;
        background: var(--table-bg);
        padding: var(--spacing-lg);
        text-align: left;
        overflow-x:auto;
        user-select: none;
        color: var(--text);
        border: 1px solid var(--border-color);
        min-width: 600px;
        max-width: 100%;
    }

        .table-widget table {
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
        }

        .table-widget .caption {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-md);
        }

        .table-widget .export-btn {
            background: none;
            border: none;
            color: var(--primary);
            cursor: pointer;
            font-size: var(--font-size-large);
            padding: var(--spacing-sm);
            transition: color 0.3s ease;
        }

            .table-widget .export-btn:hover {
                color: var(--primary);
            }

            .table-widget .export-btn svg {
                width: 2rem;
                height: 2rem;
            }

        .table-widget th {
            padding: var(--spacing-md);
            font-size: var(--font-size-base);
            font-weight: 700;
            vertical-align: middle;
            user-select: none;
            position: relative;
            border-bottom: 1px solid var(--border-color);
            color: var(--text);
            text-align: left;
            white-space: nowrap;
            transition: background-color 0.25s ease, color 0.25s ease;
        }

            .table-widget th:hover {
                color: var(--primary);
            }

            .table-widget th::after {
                content: '';
                font-size: 0.75rem;
                margin-left: 8px;
                color: var(--text);
            }

            .table-widget th:hover::after,
            .table-widget th::before {
                color: var(--primary);
            }

            .table-widget th.sorted-asc::after {
                content: '▲';
            }

            .table-widget th.sorted-desc::after {
                content: '▼';
            }

        .table-widget td {
            padding: var(--spacing-md);
            background: transparent;
            color: var(--text);
            vertical-align: middle;
            border-bottom: 1px solid var(--gray-light);
            white-space: nowrap;
        }

        .table-widget tbody tr:hover img,
        .table-widget tbody tr:hover .tag {
            border-color: var(--primary);
        }

        .table-widget tbody tr:hover td {
            cursor: pointer;
            color: var(--primary);
        }

    /* Team Member Profile */
    .team-member-profile {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
    }

        .team-member-profile img {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            border: 1px solid var(--border-color);
            object-fit: cover;
        }

    .profile-info {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-xs);
    }

    .profile-info_name {
        font-weight: 700;
        white-space: nowrap;
    }

    /* Status */
    .status {
        display: flex;
        font-weight: 700;
        gap: var(--spacing-sm);
        align-items: center;
    }

    .status_circle {
        display: inline-block;
        height: 0.5rem;
        width: 0.5rem;
        border-radius: 50%;
    }

    .status--active {
        background: var(--active);
    }

    .status--inactive {
        background: var(--inactive);
    }

    .status--offline {
        background: var(--offline);
    }

    /* Tags */
    .tags {
        display: flex;
        gap: var(--spacing-sm);
    }

    .tag {
        padding: var(--spacing-sm);
        border-radius: 0.5rem;
        font-weight: 600;
        color: var(--text);
        border: 1px solid

    </style>
}
}
@* </head> *@
<div class="table-overview">

<article class="table-widget">
    <div class="caption">
        <h2>Team Members</h2>
        <button class="export-btn" type="button">
            Export
        </button>
    </div>
    <table id="team-table">
        <thead>
            <tr>
                <th class="resizable" data-column="0">Name</th>
            </tr>
        </thead>
        <tbody id="team-member-rows">
            <tr>
                <td class="team-member-profile">
                    <img src="assets/drew.jpg" alt="Drew Crano">
                    <div class="profile-info">
                        <div class="profile-info_name">Drew Crano</div>
                        @* <div class="profile-info_alias">drew</div> *@
                    </div>
                </td>
                <td>
                    <div class="status">
                        <div class="status_circle status--active"></div>
                        Active
                    </div>
                </td>
                <td>drew.cranoexample.com</td>
                <td>
                    <div class="tags">
                        <div class="tag tag--marketing">
                            Marketing
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</article>
</div>
<script>
    document.querySelectorAll('#team-table th.resizable').forEach(th => {
        let startX, startWidth;

        const resizer = document.createElement('div');
        resizer.style.width = '1px';
        resizer.style.height = '100%';
        resizer.style.position = 'absolute';
        resizer.style.top = '0';
        resizer.style.right = '0';
        resizer.style.background = 'rgba(0, 0, 0, 0.1)';
        resizer.style.cursor = 'col-resize';
        th.style.position = 'relative';

        resizer.addEventListener('mousedown', (e) => {
            isResizing = true;
            startX = e.pageX;
            startWidth = parseInt(document.defaultView.getComputedStyle(th).width, 10);

            document.documentElement.addEventListener('mousemove', onMouseMove);
            document.documentElement.addEventListener('mouseup', onMouseUp);
        });

        function onMouseMove(e) {
            const newWidth = startWidth + (e.pageX - startX);
            th.style.width = newWidth + 'px';
        }

        function onMouseUp() {
            document.documentElement.removeEventListener(
                'mousemove',
                onMouseMove
            );
            document.documentElement.removeEventListener(
                'mouseup',
                onMouseUp
            );
            setTimeout(() => (isResizing = false), 100);
        }

        th.appendChild(resizer);
    });
        function sortTableByColumn(columnIndex) {
        if (isResizing) { // Check if resizing just happened
            return;
        }

        const table = document.getElementById('team-table');
        const rows = Array.from(table.querySelectorAll('tbody tr'));

        const isTextColumn = columnIndex !== 1; // Assuming column 1 (index 0) is text and others are numbers. Adjust as needed.

        const direction = (currentSortColumn === columnIndex && currentSortDirection === 'asc') ? 'desc' : 'asc';

        rows.sort((rowA, rowB) => {
            let cellA = rowA.children[columnIndex].textContent.trim();
            let cellB = rowB.children[columnIndex].textContent.trim();

            if (isTextColumn) {
                cellA = cellA.toLowerCase();
                cellB = cellB.toLowerCase();
            }

            if (direction === 'asc') {
                return cellA.localeCompare(cellB, undefined, { numeric: true });
            } else {
                return cellB.localeCompare(cellA, undefined, { numeric: true });
            }
        });

        for (const row of rows) {
            table.querySelector('tbody').appendChild(row);
        }

        document.querySelectorAll('#team-table th').forEach(th => {
            th.classList.remove('sorted-asc', 'sorted-desc');
        });

        const header = document.querySelector(
            `#team-table th:nth-child(${columnIndex + 1})`
        );
        header.classList.add(direction === 'asc' ? 'sorted-asc' : 'sorted-desc');
        currentSortColumn = columnIndex;
        currentSortDirection = direction;
    }
        const exportButton = document.querySelector(".export-btn");

    function exportHtmlTableToCSV(selector) {
        const table = document.querySelector(selector);
        const rows = Array.from(table.rows);
        const teamMembers = rows.map((row) =>
            Array.from(row.cells).map((cell) => cell.innerText.replace(/\n/g, " "))
        );

        const csvContent =
            "data:text/csv;charset=utf-8," +
            teamMembers
                .map((teamMember) => Object.values(teamMember).join(","))
                .join("\n");

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "team-members.csv");
        document.body.appendChild(link);
        link.click();
    }

    exportButton.addEventListener("click", function() {
        exportHtmlTableToCSV(".table-widget table");
    });

    let currentSortColumn = null;
    let currentSortDirection = 'asc';
    let isResizing = false; // NEW FLAG
    </script>

