@using Azure.Core  
@model TM.Models.ViewModels.TourViewModel
@using Microsoft.AspNetCore.Http  
@using TM.Controllers

@{  
    ViewData["Title"] = "Danh sách Tour";  
    var startDate = Context.Request.Query["startDate"];  
    var endDate = Context.Request.Query["endDate"];  
    var locationId = Context.Request.Query["locationId"];  
    var name = Context.Request.Query["name"]; 
} 

<style>
    .btn-fixed-width {
        min-width: 120px;
        text-align: center;
    }
    .modal-header {
        background-color: #0d6efd;
        color: white;
    }
    .modal-title {
        font-weight: 600;
    }
    .modal-content {
        border-radius: 0.75rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }
    .modal-body label {
        font-weight: 500;
    }
    .modal-footer {
        border-top: 1px solid #dee2e6;
    }

    .modal-body .list-group {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
    }
    .modal-body .list-group-item:nth-child(odd) {
        background-color: #f8f9fa;
    }
    .modal-body .list-group-item:nth-child(even) {
        background-color: #ffffff;
    }
    .modal-body .list-group-item + .list-group-item {
        border-top: 1px solid #dee2e6;
    }

    .country-item, .location-item {
        padding: 0.5rem 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .country-item:nth-child(odd), .location-item:nth-child(odd) {
        background-color: #f8f9fa;
    }

    .country-item:nth-child(even), .location-item:nth-child(even) {
        background-color: #ffffff;
    }

    #countryListManage, #locationListManage {
        max-height: 300px;
        overflow-y: auto;
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
    }


</style>



<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<h2 class="my-4">Danh sách Tour</h2>  
<!-- ================== PHẦN COUNTRY & LOCATION (horizontal) ================== -->

<!-- ===== HORIZONTAL COUNTRY LIST ===== -->
<div class="d-flex align-items-center gap-2 mt-3 mb-2 pb-2">
    <h5 class="mb-0">Quốc gia</h5>
    @if (Context.Session.GetString("Role") == "Admin")
    {
        <a class="btn btn-warning btn-sm" href="@Url.Action("ModifyCountry", "Tour")">
            <i class="bi bi-gear me-1"></i> Quản lý quốc gia
        </a>
    }
</div>

<div id="countryContainer" class="d-flex flex-wrap gap-2 mb-3 pb-3 border-bottom pb-2">
        <!-- Search button -->
        <a class="btn btn-sm btn-outline-dark btn-fixed-width"
           data-bs-toggle="modal"
           data-bs-target="#countryModal">
            <i class="bi bi-search me-1"></i>Tìm kiếm
        </a>

        <!-- All button -->
        <a href="@Url.Action("Index", "Tour", new {
            countryId = (int?)null,
            locationId = (int?)null,
            name = Model.Name,
            startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
            endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
            minPrice = Context.Request.Query["minPrice"],
            maxPrice = Context.Request.Query["maxPrice"],
            status = Context.Request.Query["status"],
            isVisaRequired = Context.Request.Query["isVisaRequired"]
        })" class="btn btn-sm btn-fixed-width @(Model.SelectedCountryId == null ? "btn-primary" : "btn-outline-primary")">
            Tất cả
        </a>

        @foreach (var country in Model.Countries)
        {
            var isActive = country.Id == Model.SelectedCountryId;
             <a href="@Url.Action("Index", "Tour", new {
                    countryId = country.Id,
                    locationId = (int?)null,
                    name = Model.Name,
                    startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                    endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                    minPrice = Context.Request.Query["minPrice"],
                    maxPrice = Context.Request.Query["maxPrice"],
                    status = Context.Request.Query["status"],
                    isVisaRequired = Context.Request.Query["isVisaRequired"]
                })" class="btn btn-sm btn-fixed-width @(isActive ? "btn-primary" : "btn-outline-primary")">
                    @country.Name
                </a>
        }
    
</div>


<!-- ===== HORIZONTAL LOCATION LIST ===== -->
@if (Model.SelectedCountryId != null)
{
    <div class="d-flex align-items-center gap-2 mt-3 mb-2 pb-2">
        <h5 class="mb-0">Địa điểm</h5>
        @if (Context.Session.IsInRole("Admin"))
        {
            <a class="btn btn-warning btn-sm" href="@Url.Action("ModifyLocation", "Tour")">
                <i class="bi bi-gear me-1"></i> Quản lý địa điểm
            </a>
        }
    </div>

    <div id="locationContainer" class="d-flex flex-wrap gap-2 mb-3 pb-3 border-bottom pb-2">
        <!-- Search button -->
        <a class="btn btn-sm btn-outline-dark btn-fixed-width"
           data-bs-toggle="modal"
           data-bs-target="#locationModal">
           <i class="bi bi-search me-1"></i>Tìm kiếm
        </a>
        <!-- All button -->
        <a href="@Url.Action("Index", "Tour", new {
            countryId = Model.SelectedCountryId,
            locationId = (int?)null,
            name = Model.Name,
            startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
            endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
            minPrice = Context.Request.Query["minPrice"],
            maxPrice = Context.Request.Query["maxPrice"],
            status = Context.Request.Query["status"],
            isVisaRequired = Context.Request.Query["isVisaRequired"]
        })" class="btn btn-sm btn-fixed-width @(Model.SelectedLocationId == null ? "btn-secondary" : "btn-outline-secondary")">
            Tất cả
        </a>

        @if (Model.Locations.Any())
        {
            @foreach (var loc in Model.Locations)
            {
                var isActive = loc.Id == Model.SelectedLocationId;
                <div>
                    <a href="@Url.Action("Index", "Tour", new {
                        countryId = Model.SelectedCountryId,
                        locationId = loc.Id,
                        name = Model.Name,
                        startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                        endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                        minPrice = Context.Request.Query["minPrice"],
                        maxPrice = Context.Request.Query["maxPrice"],
                        status = Context.Request.Query["status"],
                        isVisaRequired = Context.Request.Query["isVisaRequired"]
                    })" class="btn btn-sm btn-fixed-width @(isActive ? "btn-secondary" : "btn-outline-secondary")">
                        @loc.LocationName
                    </a>
                </div>
            }
        }
        else
        {
            <span class="text-muted">Chưa có địa điểm nào cho quốc gia này. Hãy thêm mới địa điểm.</span>
        }
    </div>
}





<!-- ========== FORM LỌC ========== -->
<h5>Lọc kết quả</h5>
<form method="get" class="row g-3 mb-4">
    <input type="hidden" name="countryId" value="@Model.SelectedCountryId" />
    <input type="hidden" name="locationId" value="@Model.SelectedLocationId" />

    <div class="col-md-4">
        <label for="name" class="form-label">Tên Tour</label>
        <input type="text" class="form-control" id="name" name="name" value="@Model.Name" placeholder="Nhập tên tour..." />
    </div>
    <div class="col-md-2">
        <label for="startDate" class="form-label">Từ ngày</label>
        <input type="date" class="form-control" id="startDate" name="startDate"
               value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
    </div>
    <div class="col-md-2">
        <label for="endDate" class="form-label">Đến ngày</label>
        <input type="date" class="form-control" id="endDate" name="endDate"
               value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
    </div>
    <div class="col-md-2">
        <label for="minPrice" class="form-label">Giá từ (₫)</label>
        <input type="number" class="form-control" id="minPrice" name="minPrice" 
               value="@Context.Request.Query["minPrice"]" min="0" />
    </div>
    <div class="col-md-2">
        <label for="maxPrice" class="form-label">Giá đến (₫)</label>
        <input type="number" class="form-control" id="maxPrice" name="maxPrice" 
               value="@Context.Request.Query["maxPrice"]" min="0" />
    </div>
    
    <!-- Second row for additional filters -->
    <div class="col-md-4">
        <label for="status" class="form-label">Trạng thái</label>
        <select class="form-select" id="status" name="status">
            <option value="">Tất cả trạng thái</option>
            <option value="Available" selected="@(Context.Request.Query["status"] == "Available" ? "selected" : null)">Hoạt động</option>
            <option value="Ready" selected="@(Context.Request.Query["status"] == "Ready" ? "selected" : null)">Sẵn sàng</option>
            <option value="Cancelled" selected="@(Context.Request.Query["status"] == "Cancelled" ? "selected" : null)">Đã hủy</option>
            <option value="Completed" selected="@(Context.Request.Query["status"] == "Completed" ? "selected" : null)">Hoàn thành</option>
        </select>
    </div>
    <div class="col-md-4">
        <label for="isVisaRequired" class="form-label">Yêu cầu visa</label>
        <select class="form-select" id="isVisaRequired" name="isVisaRequired">
            <option value="">Tất cả</option>
            <option value="true" selected="@(Context.Request.Query["isVisaRequired"] == "true" ? "selected" : null)">Có yêu cầu visa</option>
            <option value="false" selected="@(Context.Request.Query["isVisaRequired"] == "false" ? "selected" : null)">Không yêu cầu visa</option>
        </select>
    </div>
    <div class="col-md-2">
    <label class="form-label">&nbsp;</label>
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
            <i class="bi bi-arrow-clockwise"></i> Xóa bộ lọc
        </button>
    </div>
</div>

    <div class="col-md-2">
        <label class="form-label">&nbsp;</label>
        <div class="d-flex gap-2">
             <button type="submit" class="btn btn-primary w-100">
                <i class="bi bi-search"></i> Lọc
            </button>
        </div>
    </div>
</form>

<hr />

<div class="d-flex align-items-center pb-3">
    <div class="me-3">
        <a asp-controller="Tour" asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Tạo Tour
        </a>
    </div>
    <div>
        <div class="text-muted fw-semibold">
            <i class="fas fa-list-ul text-primary me-2"></i>
            Tổng cộng <span class="text-primary">@Model.Pagination.TotalItems.ToString("N0")</span> tour được tìm thấy.
        </div>
    </div>
</div>

<!-- ========== DANH SÁCH TOUR ========== -->
@if (Model.Tours.Any())
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var item in Model.Tours)
        {
            var isReadOnly = item.Status == "Completed" || item.Status == "Cancelled";
            var actionName = isReadOnly ? "Details" : "Edit";

            <div class="col">
    <div class="card shadow-sm h-100">
        <div class="card-body">
            <h5 class="card-title text-primary fw-bold">@item.Name</h5>
            <h6 class="card-subtitle text-muted mb-4">
                <i class="fa-solid fa-calendar-days me-1"></i>
                @item.StartDate.ToString("dd/MM/yyyy") - @item.EndDate.ToString("dd/MM/yyyy")
            </h6>

            <div class="mb-1">
                <strong>Địa điểm:</strong> @item.LocationName - @item.CountryName
            </div>

            <div class="mb-1">
                <strong>Giá:</strong>
                @if (item.SuggestPrice == item.DiscountPrice || item.DiscountPrice == null)
                {
                    <span class="fw-bold text-dark">@string.Format("{0:N0}₫", item.SuggestPrice)</span>
                }
                else
                {
                    <span class="fw-bold text-danger">@string.Format("{0:N0}₫", item.DiscountPrice)</span>
                    <span class="text-muted text-decoration-line-through ms-2" style="font-size: 0.9em;">
                        @string.Format("{0:N0}₫", item.SuggestPrice)
                    </span>
                }
            </div>

            <div class="mb-1">
                <strong>Số chỗ:</strong>
                @if (item.AvailableSeats == 0)
                {
                    <span class="badge bg-danger">Hết chỗ</span>
                }
                else
                {
                    <span class="badge bg-success">@(@item.TotalSeats - @item.AvailableSeats) / @item.TotalSeats chỗ</span>
                }
            </div>

            <div class="mb-1">
                <strong>Trạng thái:</strong>
                @switch (item.Status)
                {
                    case "Available":
                        <span class="badge bg-primary"><i class="fa-solid fa-circle-check me-1"></i>Hoạt động</span>; break;
                    case "Ready":
                        <span class="badge bg-success"><i class="fa-solid fa-hourglass-start me-1"></i>Sẵn sàng</span>; break;
                    case "Cancelled":
                        <span class="badge bg-danger"><i class="fa-solid fa-ban me-1"></i>Đã hủy</span>; break;
                    case "Completed":
                        <span class="badge bg-secondary"><i class="fa-solid fa-check-double me-1"></i>Hoàn thành</span>; break;
                    default:
                        <span class="badge bg-warning"><i class="fa-solid fa-question me-1"></i>Không xác định</span>; break;
                }
            </div>

            <div class="mb-1">
                <strong>Yêu cầu visa:</strong>
                @if (item.IsVisaRequired == true)
                {
                    <span class="badge bg-success">
                        <i class="fa-solid fa-check me-1"></i> Có
                    </span>
                }
                else
                {
                    <span class="badge bg-secondary">
                        <i class="fa-solid fa-xmark me-1"></i> Không
                    </span>
                }
            </div>

            <div class="mb-1">
                <strong>Đang giữ chỗ:</strong>
                @{
                    var routeValues = new RouteValueDictionary
                    {
                        { "id", item.Id },
                        { "status", new[] { "Confirmed", "Reserved" } }
                    };
                    var url = Url.Action(actionName, "Tour", routeValues) + "#passenger-list";
                }
                <a href="@url">
                <span class="badge bg-light text-dark" style="background-color: #f0e9ff !important; cursor: pointer">
                    <i class="fa-solid fa-user-clock me-1"></i> @item.DepositedCustomer khách, @item.ReservedCustomer đã cọc
                </span>
                </a>
            </div>

            <div class="mb-1">
                <strong>Passport:</strong>
                @{
                    var passportRouteValues = new RouteValueDictionary
                    {
                        { "id", item.Id },
                        { "PassengerGroup", "3" }
                    };
                    var passportUrl = Url.Action(actionName, "Tour", passportRouteValues) + "#passenger-list";
                }
                <a href="@passportUrl">
                    <span class="badge bg-light text-dark" style="background-color: #f0e9ff !important; cursor: pointer">
                        <i class="fa-solid fa-passport me-1"></i> @(item.TotalCustomers - item.CustomerNoPassport) / @item.TotalCustomers khách
                    </span>
                </a>
            </div>

            <div class="mb-1">
                <strong>Đã thanh toán đủ:</strong>
                @{
                    var paidRouteValues = new RouteValueDictionary
                    {
                        { "id", item.Id },
                        { "status", new[] { "Paid", "Confirmed", "Reserved" } },
                        { "PassengerGroup", "4" }
                    };
                    var paidUrl = Url.Action(actionName, "Tour", paidRouteValues) + "#passenger-list";
                }
                <a href="@paidUrl">
                    <span class="badge bg-light text-dark" style="background-color: #e1f8e6 !important; cursor: pointer">
                        <i class="fa-solid fa-money-bill-wave me-1"></i> @item.FullPayCustomers / @item.TotalCustomers khách
                    </span>
                </a>
            </div>

            <div class="mb-1">
                <strong>Di chuyển:</strong>
                @{
                    var travelRouteValues = new RouteValueDictionary
                    {
                        { "id", item.Id },
                        { "status", new[] { "Paid" } },
                        { "PassengerGroup", "5" }
                    };
                    var travelUrl = Url.Action(actionName, "Tour", travelRouteValues) + "#passenger-list";
                }
                <a href="@travelUrl">
                    <span class="badge bg-light text-dark" style="background-color: #fff3cd !important; cursor: pointer">
                        <i class="fa-solid fa-plane-departure me-1"></i> @item.CustomerFullPayNotTicket khách hàng trả đủ chưa có vé
                    </span>
                </a>
            </div>
        </div>

        <div class="card-footer text-end bg-white border-0">
                        @if (item.Status != "Completed" && item.Status != "Cancelled")
            {
                <a class="btn btn-sm btn-outline-info me-1" asp-action="Detail" asp-route-id="@item.Id" title="Chi tiết">
                    <i class="bi bi-eye"></i>
                </a>
                <a class="btn btn-sm btn-outline-warning me-1" asp-action="@actionName" asp-route-id="@item.Id" title="Chỉnh sửa">
                    <i class="bi bi-pencil"></i>
                </a>
                <form asp-action="DeleteConfirmed" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@item.Id" />
                    <button type="submit" class="btn btn-sm btn-outline-danger"
                            onclick="return confirm('Bạn có chắc chắn muốn xóa tour này không?');"
                            title="Xóa">
                        <i class="bi bi-trash"></i>
                    </button>
                </form>
            }
            else
            {
                <a class="btn btn-sm btn-outline-info me-1" asp-action="@actionName" asp-route-id="@item.Id" title="Chi tiết">
                    <i class="bi bi-eye"></i>
                </a>
            }
        </div>
    </div>
</div>
}
    </div>
    <!-- Pagination -->
    @await Html.PartialAsync("_Pagination", Model.Pagination)
    <!-- End Pagination -->
}
else
{
    <p><em>Không có tour nào phù hợp với bộ lọc hiện tại.</em></p>
}

<!-- Modal tìm Country -->
<div class="modal fade" id="countryModal" tabindex="-1" aria-labelledby="countryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chọn quốc gia</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
      </div>
      <div class="modal-body">
        <input type="text" class="form-control mb-3" id="searchCountryInput" placeholder="Tìm quốc gia..." onkeyup="filterCountryList(this)">
        <div class="list-group" id="countryList">
          @foreach (var country in Model.Countries)
          {
              <a href="@Url.Action("Index", "Tour", new {
                  countryId = country.Id,
                  locationId = (int?)null,
                  name = Model.Name,
                  startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                  endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                  minPrice = Context.Request.Query["minPrice"],
                  maxPrice = Context.Request.Query["maxPrice"],
                  status = Context.Request.Query["status"],
                  isVisaRequired = Context.Request.Query["isVisaRequired"]
              })"
              class="list-group-item list-group-item-action country-list-item">
                  @country.Name
              </a>
          }
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal tìm Location -->
<div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="locationModalLabel">Chọn Địa điểm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <!-- Search input -->
                <div class="input-group mb-3">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" placeholder="Tìm địa điểm..." onkeyup="filterLocationList(this)">
                </div>

                <!-- List all locations -->
                <div id="locationList" class="list-group">
                    @foreach (var loc in Model.Locations)
                    {
                        <a href="@Url.Action("Index", "Tour", new {
                            countryId = Model.SelectedCountryId,
                            locationId = loc.Id,
                            name = Model.Name,
                            startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                            endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                            minPrice = Context.Request.Query["minPrice"],
                            maxPrice = Context.Request.Query["maxPrice"],
                            status = Context.Request.Query["status"],
                            isVisaRequired = Context.Request.Query["isVisaRequired"]
                        })" class="list-group-item list-group-item-action location-list-item">
                            @loc.LocationName
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* <!-- Modal modify Country -->
<div class="modal fade" id="manageCountryModal" tabindex="-1" aria-labelledby="manageCountryLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <form asp-action="SaveCountry" method="post">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title" id="manageCountryLabel">Quản lý quốc gia</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <input type="text" class="form-control" placeholder="Tìm quốc gia..." onkeyup="filterCountryManageList(this)">
          </div>
          <div id="countryListManage" class="mb-4">
            @foreach (var country in Model.Countries)
            {
                <div class="d-flex align-items-center justify-content-between mb-2 country-item">
                    <span>@country.Name (@country.Code)</span>
                    <a class="btn btn-sm btn-link" onclick="populateCountryForm('@country.Id', '@country.Name', '@country.Code')">
                        <i class="bi bi-pencil-square me-1"></i>Sửa
                    </a>
                </div>
            }
          </div>
          <h6 class="mb-2">Thêm / Cập nhật</h6>
          <input type="hidden" name="Id" id="CountryId" />
          <div class="mb-3">
            <label class="form-label">Tên quốc gia</label>
            <input type="text" class="form-control" name="Name" id="CountryName" required maxlength="50" />
          </div>
          <div class="mb-3">
            <label class="form-label">Mã quốc gia</label>
            <input type="text" class="form-control" name="Code" id="CountryCode" required maxlength="3" />
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Lưu</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal modify Location -->
<div class="modal fade" id="manageLocationModal" tabindex="-1" aria-labelledby="manageLocationLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <form asp-action="SaveLocation" method="post">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title" id="manageLocationLabel">Quản lý địa điểm</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <input type="text" class="form-control" placeholder="Tìm địa điểm..." onkeyup="filterLocationManageList(this)">
          </div>
          <div id="locationListModifierModal" class="mb-4">
            @foreach (var location in Model.Locations)
            {
                <div class="d-flex align-items-center justify-content-between mb-2 location-item">
                    <span>@location.LocationName</span>
                    <a class="btn btn-sm btn-link" onclick="populateLocationForm('@location.Id', '@location.LocationName')">
                        <i class="bi bi-pencil-square me-1"></i>Sửa
                    </a>
                </div>
            }
          </div>
          <h6 class="mb-2">Thêm / Cập nhật</h6>
          <input type="hidden" name="Id" id="LocationId" />
          <div class="mb-3">
            <label class="form-label">Tên địa điểm</label>
            <input type="text" class="form-control" name="LocationName" id="LocationName" required maxlength="50"/>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Lưu</button>
        </div>
      </form>
    </div>
  </div>
</div> *@

<!-- Function cho các modal chỉnh sửa quốc gia -->
<script>
    function populateCountryForm(id, name, code) {
        document.getElementById("CountryId").value = id;
        document.getElementById("CountryName").value = name;
        document.getElementById("CountryCode").value = code;
    }

    function populateLocationForm(id, name) {
        document.getElementById("LocationId").value = id;
        document.getElementById("LocationName").value = name;
    }

    function filterCountryList(input) {
        console.log('country search:', input.value);
        const filter = input.value.toLowerCase();
        document.querySelectorAll('#countryList .country-list-item').forEach(item => {
            console.log(item)
            if (item.innerText.toLowerCase().includes(filter)) {
                item.style.setProperty('display', 'block');
            } else {
                item.style.setProperty('display', 'none');
            }
            @* item.style.display = item.innerText.toLowerCase().includes(filter) ? 'block' : 'none'; *@
        });
    }

    function filterLocationList(input) {
        console.log('location search:', input.value);
            
        const filter = input.value.toLowerCase();
        document.querySelectorAll('#locationList .location-list-item').forEach(item => {
            if (item.innerText.toLowerCase().includes(filter)) {
                item.style.setProperty('display', 'block');
            } else {
                item.style.setProperty('display', 'none');
            }
            @* item.style.display = item.innerText.toLowerCase().includes(query) ? 'block' : 'none'; *@
        });
    }

    function filterCountryManageList(input) {
        console.log('country manage search:', input.value);

        const filter = input.value.toLowerCase();
        document.querySelectorAll('#countryListManage .country-item').forEach(item => {
            if (item.innerText.toLowerCase().includes(filter)) {
                item.style.setProperty('display', 'flex', 'important');
            } else {
                item.style.setProperty('display', 'none', 'important');
            }
            @* item.style.display = item.innerText.toLowerCase().includes(filter) ? '' : 'none'; *@
        });
    }

    // Dùng cho modal quản lý địa điểm
    function filterLocationManageList(input) {
        const filter = input.value.toLowerCase();

        document.querySelectorAll('#locationListModifierModal .location-item').forEach(item => {
            if (item.innerText.toLowerCase().includes(filter)) {
                item.style.setProperty('display', 'flex', 'important');
            } else {
                item.style.setProperty('display', 'none', 'important');
            }
            @* item.style.display = item.innerText.toLowerCase().includes(filter) ? '' : 'none'; *@
        });
        
    }

    // Hàm clean text nếu hủy giữa chừng
    function clearFilters() {
        document.getElementById('name').value = '';
        document.getElementById('startDate').value = '';
        document.getElementById('endDate').value = '';
        document.getElementById('minPrice').value = '';
        document.getElementById('maxPrice').value = '';
        document.getElementById('status').value = '';
        document.getElementById('isVisaRequired').value = '';
        
        const baseUrl = '@Url.Action("Index", "Tour")';
        window.location.href = baseUrl;
    }

    // Add input validation for price range
    document.addEventListener('DOMContentLoaded', function() {
        const minPriceInput = document.getElementById('minPrice');
        const maxPriceInput = document.getElementById('maxPrice');
        
        if (minPriceInput && maxPriceInput) {
            minPriceInput.addEventListener('input', function() {
                const minValue = parseInt(this.value) || 0;
                const maxValue = parseInt(maxPriceInput.value) || 0;
                
                if (maxValue > 0 && minValue > maxValue) {
                    this.setCustomValidity('Giá từ không được lớn hơn giá đến');
                } else {
                    this.setCustomValidity('');
                }
            });
            
            maxPriceInput.addEventListener('input', function() {
                const maxValue = parseInt(this.value) || 0;
                const minValue = parseInt(minPriceInput.value) || 0;
                
                if (minValue > 0 && maxValue > 0 && minValue > maxValue) {
                    this.setCustomValidity('Giá đến không được nhỏ hơn giá từ');
                } else {
                    this.setCustomValidity('');
                }
            });
        }
    });
</script>

