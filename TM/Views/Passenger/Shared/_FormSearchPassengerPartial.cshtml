@using TM.Enum
@model int
@{
    var selectedStatus = ViewBag.SelectedStatus as string[] ?? Array.Empty<string>();
    var selectedGroupBy = ViewBag.SelectedGroupBy as string ?? "";
    var keyword = ViewBag.Keyword as string ?? "";
    var formAction = ViewBag.FormAction as string ?? "Edit";
    var statusOptions = new[] {
        new { Value = "Confirmed", Text = "Đã cọc" },
        new { Value = "Reserved", Text = "Đang giữ chỗ" },
        new { Value = "Paid", Text = "Đã thanh toán" },
        new { Value = "Cancelled", Text = "Đã hủy" }
    };
    var groupOptions = new[] {
        new { Value = "", Text = "Không gom nhóm" },
        new { Value = "1", Text = "Gom theo chuyến bay đi" },
        new { Value = "2", Text = "Gom theo chuyến bay về" },
        new { Value = "3", Text = "Thông tin Passport" },
        new { Value = "4", Text = "Tình trạng thanh toán" },
        new { Value = "5", Text = "Tình trạng vé di chuyển" }
    };
}

<form method="get" action="@Url.Action(formAction, "Tour", new { id = Model })" id="passengerFilterForm">
    <div id="filterCustomerContainer" class="row g-3 mb-2" data-action="@formAction" data-id="@Model">
        <div class="col-md-5">
            <div class="input-group">
                <div class="input-group-text">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </div>
                <input type="text" class="form-control" placeholder="Tìm theo Tên, CCCD hoặc SĐT" name="keyword" value="@keyword">
            </div>
        </div>
        <div class="col-md-3">
            <div class="input-group d-flex align-items-center" style="flex-wrap: nowrap; max-width: 100%; overflow: hidden;">
                <label class="input-group-text flex-shrink-0" style="white-space: nowrap; flex-basis: auto; padding: 0.38rem 0.5rem; margin-right: 1px;">Trạng thái</label>
                <select class="selectpicker"
                        name="status"
                        id="status-passenger"
                        multiple
                        data-width="100%"
                        data-dropup-auto="false"
                        data-dropdown-align-right="auto"
                        data-container="body"
                        style="border-top-left-radius: 0; border-bottom-left-radius: 0; min-width: 0; flex: 1 1 auto;">
                    @foreach (var opt in statusOptions)
                    {
                        if (selectedStatus.Contains(opt.Value))
                        {
                            <option value="@opt.Value" selected>@opt.Text</option>
                        }
                        else
                        {
                            <option value="@opt.Value">@opt.Text</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <label class="input-group-text">Gom nhóm</label>
                <select class="form-select" name="PassengerGroup" id="PassengerGroup">
                    @foreach (var opt in groupOptions)
                    {
                        if (selectedGroupBy == opt.Value)
                        {
                            <option value="@opt.Value" selected>@opt.Text</option>
                        }
                        else
                        {
                            <option value="@opt.Value">@opt.Text</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-md-1">
            <button type="submit" id="applyPassengerFilterBtn" class="btn btn-primary">Lọc</button>
        </div>
    </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const passengerFilterForm = document.getElementById('passengerFilterForm');
    if (passengerFilterForm) {
        passengerFilterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const params = new URLSearchParams();
            
            // Thêm keyword nếu có
            const keyword = formData.get('keyword');
            if (keyword) {
                params.append('keyword', keyword);
            }
            
            // Thêm PassengerGroup nếu có
            const passengerGroup = formData.get('PassengerGroup');
            if (passengerGroup) {
                params.append('PassengerGroup', passengerGroup);
            }
            
            // Thêm các status đã chọn
            const statusSelect = document.getElementById('status-passenger');
            const selectedStatusOptions = Array.from(statusSelect.selectedOptions);
            selectedStatusOptions.forEach(option => {
                params.append('status', option.value);
            });
            
            // Tạo URL với anchor
            const currentUrl = this.action;
            const finalUrl = `${currentUrl}?${params.toString()}#passenger-list`;
            
            window.location.href = finalUrl;
        });
    }
});
</script>

<style>
    /* Giới hạn chiều rộng của các mục đã chọn trong selectpicker */
    .bootstrap-select .btn {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        background-color: var(--bs-body-bg);
        border: var(--bs-border-width) solid var(--bs-border-color);
    }

    /* Đảm bảo dropdown hiển thị trên cùng */
    .bootstrap-select .dropdown-menu {
        z-index: 2000;
    }

    /* Tùy chỉnh chips (các mục đã chọn) để không tràn */
    .bootstrap-select .filter-option-inner-inner {
        display: flex;
        flex-wrap: nowrap;
        overflow: hidden;
    }
</style>