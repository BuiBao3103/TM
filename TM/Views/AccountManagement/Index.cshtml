@model List<TM.Models.ViewModels.AccountViewModel>
@{
    Layout = "_Layout";
}

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fa-solid fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fa-solid fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="text-primary mb-1">
            <i class="fa-solid fa-users me-2"></i>Quản lý tài khoản
        </h2>
        <p class="text-muted mb-0">Danh sách tài khoản người dùng trong hệ thống</p>
    </div>
    <div>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAccountModal">
            <i class="fa-solid fa-plus me-1"></i>Thêm tài khoản
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-primary mb-2">
                    <i class="fa-solid fa-users fa-2x"></i>
                </div>
                <h4 class="fw-bold text-dark">@Model.Count</h4>
                <p class="text-muted small mb-0">Tổng tài khoản</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-success mb-2">
                    <i class="fa-solid fa-user-shield fa-2x"></i>
                </div>
                <h4 class="fw-bold text-dark">@Model.Count(x => x.Role == "Admin")</h4>
                <p class="text-muted small mb-0">Admin</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-info mb-2">
                    <i class="fa-solid fa-user-tie fa-2x"></i>
                </div>
                <h4 class="fw-bold text-dark">@Model.Count(x => x.Role == "Sale")</h4>
                <p class="text-muted small mb-0">Sale</p>
            </div>
        </div>
    </div>
</div>

<!-- Accounts Table -->
<div class="card border-0 shadow-sm" id="tableView">
    <div class="card-header bg-white py-3">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0 text-dark">
                <i class="fa-solid fa-list me-2 text-primary"></i>Danh sách tài khoản
            </h5>
            <span class="text-muted small">Hiển thị @Model.Count kết quả</span>
        </div>
    </div>
    <div class="card-body p-0">
        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="border-0 ps-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll">
                                </div>
                            </th>
                            <th class="border-0">ID</th>
                            <th class="border-0">Tên đăng nhập</th>
                            <th class="border-0">Vai trò</th>
                            <th class="border-0">Trạng thái</th>
                            <th class="border-0 text-center">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var account in Model)
                        {
                            <tr class="account-row" data-username="@account.UserName.ToLower()" data-role="@account.Role">
                                <td class="ps-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="@account.Id">
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark fw-normal">#@account.Id</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle me-3">
                                            <i class="fa-solid fa-user"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold text-dark">@account.UserName</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var roleClass = account.Role switch
                                        {
                                            "Admin" => "bg-danger",
                                            "Sale" => "bg-warning",
                                            _ => "bg-secondary"
                                        };
                                        var roleIcon = account.Role switch
                                        {
                                            "Admin" => "fa-user-shield",
                                            "Sale" => "fa-user-tie",
                                            _ => "fa-question"
                                        };
                                    }
                                    <span class="badge @roleClass">
                                        <i class="fa-solid @roleIcon me-1"></i>@account.Role
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-success-subtle text-success border border-success-subtle">
                                        <i class="fa-solid fa-circle fa-xs me-1"></i>Hoạt động
                                    </span>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-success edit-account-btn" title="Chỉnh sửa"
                                                data-bs-toggle="modal" data-bs-target="#editAccountModal"
                                                data-id="@account.Id" data-username="@account.UserName" data-role="@account.Role">
                                            <i class="fa-solid fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" title="Xóa">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="mb-3">
                    <i class="fa-solid fa-users fa-3x text-muted"></i>
                </div>
                <h5 class="text-muted">Không tìm thấy tài khoản nào</h5>
                <p class="text-muted">Hiện tại chưa có tài khoản nào trong hệ thống.</p>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAccountModal">
                    <i class="fa-solid fa-plus me-1"></i>Thêm tài khoản đầu tiên
                </button>
            </div>
        }
    </div>
</div>

<!-- Add Account Modal -->
<div class="modal fade" id="addAccountModal" tabindex="-1" aria-labelledby="addAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="addAccountModalLabel">
                    <i class="fa-solid fa-user-plus me-2"></i>Thêm tài khoản mới
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addAccountForm" method="post" asp-action="Create" asp-controller="AccountManagement">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="userName" class="form-label">
                            <i class="fa-solid fa-user me-1 text-primary"></i>Tên đăng nhập
                        </label>
                        <input type="text" class="form-control" id="userName" name="UserName" placeholder="Nhập tên đăng nhập" required maxlength="50">
                        <div class="invalid-feedback">
                            Tên đăng nhập phải từ 3-50 ký tự và chỉ chứa chữ cái, số, dấu gạch dưới.
                        </div>
                        <div class="username-check-message"></div>
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">
                            <i class="fa-solid fa-lock me-1 text-primary"></i>Mật khẩu
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="password" name="Password" placeholder="Nhập mật khẩu" required minlength="6" maxlength="100">
                            <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                <i class="fa-solid fa-eye" id="eyeIcon"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback">
                            Mật khẩu phải có ít nhất 6 ký tự.
                        </div>
                        <div class="form-text">
                            Mật khẩu phải có ít nhất 6 ký tự.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">
                            <i class="fa-solid fa-user-tag me-1 text-primary"></i>Vai trò
                        </label>
                        <select class="form-select" id="role" name="Role" required>
                            <option value="">Chọn vai trò</option>
                            <option value="Sale">
                                <i class="fa-solid fa-user-tie"></i> Sale
                            </option>
                            <option value="Admin">
                                <i class="fa-solid fa-user-shield"></i> Admin
                            </option>
                        </select>
                        <div class="invalid-feedback">
                            Vui lòng chọn vai trò.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fa-solid fa-times me-1"></i>Hủy
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fa-solid fa-save me-1"></i>Tạo tài khoản
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Account Modal -->
<div class="modal fade" id="editAccountModal" tabindex="-1" aria-labelledby="editAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="editAccountModalLabel">
                    <i class="fa-solid fa-user-edit me-2"></i>Chỉnh sửa tài khoản
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editAccountForm" method="post" asp-action="Update" asp-controller="AccountManagement">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editAccountId" name="Id" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editUserName" class="form-label">
                            <i class="fa-solid fa-user me-1 text-primary"></i>Tên đăng nhập
                        </label>
                        <input type="text" class="form-control" id="editUserName" name="UserName" readonly>
                    </div>

                    <p class="text-muted small">Để đổi mật khẩu, vui lòng nhập đầy đủ các trường dưới đây. Để trống nếu không muốn thay đổi.</p>
                    
                    <div class="mb-3">
                        <label for="editOldPassword" class="form-label">
                            <i class="fa-solid fa-key me-1 text-primary"></i>Mật khẩu cũ
                        </label>
                        <input type="password" class="form-control" id="editOldPassword" name="OldPassword" placeholder="Nhập mật khẩu cũ">
                    </div>

                    <div class="mb-3">
                        <label for="editPassword" class="form-label">
                            <i class="fa-solid fa-lock me-1 text-primary"></i>Mật khẩu mới
                        </label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="editPassword" name="NewPassword" placeholder="Nhập mật khẩu mới" minlength="6" maxlength="100">
                            <button class="btn btn-outline-secondary" type="button" id="toggleEditPassword">
                                <i class="fa-solid fa-eye" id="editEyeIcon"></i>
                            </button>
                        </div>
                        <div class="invalid-feedback" id="editPassword-feedback">
                            Mật khẩu phải có ít nhất 6 ký tự.
                        </div>
                    </div>

                     <div class="mb-3">
                        <label for="editConfirmPassword" class="form-label">
                            <i class="fa-solid fa-check-double me-1 text-primary"></i>Xác nhận mật khẩu mới
                        </label>
                        <input type="password" class="form-control" id="editConfirmPassword" name="ConfirmPassword" placeholder="Nhập lại mật khẩu mới">
                         <div class="invalid-feedback">
                            Mật khẩu xác nhận không khớp.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editRole" class="form-label">
                            <i class="fa-solid fa-user-tag me-1 text-primary"></i>Vai trò
                        </label>
                        <select class="form-select" id="editRole" name="Role" required>
                            <option value="">Chọn vai trò</option>
                            <option value="Sale">Sale</option>
                            <option value="Admin">Admin</option>
                        </select>
                        <div class="invalid-feedback">
                            Vui lòng chọn vai trò.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fa-solid fa-times me-1"></i>Hủy
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fa-solid fa-save me-1"></i>Lưu thay đổi
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 14px;
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
        }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .btn-group .btn {
        border-radius: 4px !important;
    }

        .btn-group .btn:not(:last-child) {
            margin-right: 2px;
        }

    .badge {
        font-weight: 500;
    }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        border-radius: 12px 12px 0 0;
        border-bottom: none;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 2rem;
    }

    .modal-footer {
        border-top: 1px solid #e9ecef;
        padding: 1.5rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .input-group .btn {
        border-left: none;
    }

    .form-text {
        font-size: 0.85rem;
        color: #6c757d;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Select all functionality
        const selectAllCheckbox = document.getElementById('selectAll');
        const individualCheckboxes = document.querySelectorAll('tbody input[type="checkbox"]');

        selectAllCheckbox.addEventListener('change', function() {
            individualCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // Update select all when individual checkboxes change
        individualCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const checkedCount = document.querySelectorAll('tbody input[type="checkbox"]:checked').length;
                selectAllCheckbox.checked = checkedCount === individualCheckboxes.length;
                selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < individualCheckboxes.length;
            });
        });

        // Toggle password visibility
        const togglePassword = document.getElementById('togglePassword');
        const passwordInput = document.getElementById('password');
        const eyeIcon = document.getElementById('eyeIcon');

        togglePassword.addEventListener('click', function() {
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);

            if (type === 'password') {
                eyeIcon.className = 'fa-solid fa-eye';
            } else {
                eyeIcon.className = 'fa-solid fa-eye-slash';
            }
        });

        // Check username availability
        const userNameInput = document.getElementById('userName');
        let checkUsernameTimeout;

        // userNameInput.addEventListener('input', function() {
        //     clearTimeout(checkUsernameTimeout);
        //     const messageDiv = document.querySelector('.username-check-message');
        //     messageDiv.innerHTML = '';

        //     const userName = this.value.trim();
        //     if (userName.length >= 3) {
        //         checkUsernameTimeout = setTimeout(() => {
        //             fetch('/AccountManagement/CheckUserName', {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/x-www-form-urlencoded',
        //                     'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        //                 },
        //                 body: `userName=${encodeURIComponent(userName)}`
        //             })
        //             .then(response => response.json())
        //             .then(data => {
        //                 if (data.exists) {
        //                     messageDiv.innerHTML = '<small class="text-danger"><i class="fa-solid fa-times me-1"></i>Tên đăng nhập đã tồn tại</small>';
        //                     userNameInput.classList.add('is-invalid');
        //                 } else {
        //                     messageDiv.innerHTML = '<small class="text-success"><i class="fa-solid fa-check me-1"></i>Tên đăng nhập có thể sử dụng</small>';
        //                     userNameInput.classList.remove('is-invalid');
        //                 }
        //             })
        //             .catch(error => {
        //                 console.error('Error checking username:', error);
        //             });
        //         }, 500);
        //     }
        // });

        // Form validation
        const addAccountForm = document.getElementById('addAccountForm');
        addAccountForm.addEventListener('submit', function(e) {
            const userName = document.getElementById('userName').value.trim();
            const password = document.getElementById('password').value.trim();
            const role = document.getElementById('role').value;

            let isValid = true;

            // Clear previous validation states
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

            // Validate username
            if (!userName || userName.length < 3 || userName.length > 50) {
                document.getElementById('userName').classList.add('is-invalid');
                isValid = false;
            }

            // Check if username exists
            const usernameMessage = document.querySelector('.username-check-message');
            if (usernameMessage.innerHTML.includes('đã tồn tại')) {
                document.getElementById('userName').classList.add('is-invalid');
                isValid = false;
            }

            // Validate password
            if (!password || password.length < 6 || password.length > 100) {
                document.getElementById('password').classList.add('is-invalid');
                isValid = false;
            }

            // Validate role
            if (!role || (role !== 'Sale' && role !== 'Admin')) {
                document.getElementById('role').classList.add('is-invalid');
                isValid = false;
            }

            if (!isValid) {
                e.preventDefault();
                return false;
            }

            // If valid, show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-1"></i>Đang tạo...';
            submitBtn.disabled = true;
        });

        // Reset form when modal is hidden
        document.getElementById('addAccountModal').addEventListener('hidden.bs.modal', function() {
            addAccountForm.reset();
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelector('.username-check-message').innerHTML = '';

            // Reset password visibility
            passwordInput.setAttribute('type', 'password');
            eyeIcon.className = 'fa-solid fa-eye';
        });

        // Edit Account Modal Logic
        const editAccountModal = document.getElementById('editAccountModal');
        if (editAccountModal) {
            editAccountModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const accountId = button.getAttribute('data-id');
                const userName = button.getAttribute('data-username');
                const role = button.getAttribute('data-role');

                const modal = this;
                modal.querySelector('#editAccountId').value = accountId;
                modal.querySelector('#editUserName').value = userName;
                modal.querySelector('#editRole').value = role;
            });

            // Toggle password visibility for edit form
            const toggleEditPassword = document.getElementById('toggleEditPassword');
            const editPasswordInput = document.getElementById('editPassword');
            const editEyeIcon = document.getElementById('editEyeIcon');

            if (toggleEditPassword) {
                toggleEditPassword.addEventListener('click', function () {
                    const type = editPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    editPasswordInput.setAttribute('type', type);
                    editEyeIcon.className = type === 'password' ? 'fa-solid fa-eye' : 'fa-solid fa-eye-slash';
                });
            }

            // Reset form when modal is hidden
            editAccountModal.addEventListener('hidden.bs.modal', function () {
                const form = document.getElementById('editAccountForm');
                form.reset();
                form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                editPasswordInput.setAttribute('type', 'password');
                editEyeIcon.className = 'fa-solid fa-eye';
            });

            // Form validation for edit
            const editAccountForm = document.getElementById('editAccountForm');
            editAccountForm.addEventListener('submit', function(e) {
                const oldPassword = document.getElementById('editOldPassword').value;
                const newPassword = document.getElementById('editPassword').value;
                const confirmPassword = document.getElementById('editConfirmPassword').value;
                const role = document.getElementById('editRole').value;
                let isValid = true;

                // Clear previous validation states
                this.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

                // --- Password Change Validation ---
                const isChangingPassword = oldPassword || newPassword || confirmPassword;

                if (isChangingPassword) {
                    // All three fields are required if one is filled
                    if (!oldPassword) {
                        document.getElementById('editOldPassword').classList.add('is-invalid');
                        isValid = false;
                    }
                    if (!newPassword) {
                        document.getElementById('editPassword').classList.add('is-invalid');
                        document.getElementById('editPassword-feedback').innerText = "Vui lòng nhập mật khẩu mới.";
                        isValid = false;
                    }
                    if (!confirmPassword) {
                        document.getElementById('editConfirmPassword').classList.add('is-invalid');
                        isValid = false;
                    }

                    // Validate new password length
                    if (newPassword && (newPassword.length < 6 || newPassword.length > 100)) {
                        document.getElementById('editPassword').classList.add('is-invalid');
                         document.getElementById('editPassword-feedback').innerText = "Mật khẩu phải có ít nhất 6 ký tự.";
                        isValid = false;
                    }

                    // Validate passwords match
                    if (newPassword && confirmPassword && newPassword !== confirmPassword) {
                        document.getElementById('editConfirmPassword').classList.add('is-invalid');
                        isValid = false;
                    }
                }
                
                // --- Role Validation ---
                if (!role || (role !== 'Sale' && role !== 'Admin')) {
                    document.getElementById('editRole').classList.add('is-invalid');
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                    return false;
                }

                const submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-1"></i>Đang lưu...';
                submitBtn.disabled = true;
            });
        }
    });
</script>